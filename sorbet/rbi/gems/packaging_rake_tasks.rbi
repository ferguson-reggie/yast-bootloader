# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/packaging_rake_tasks/all/packaging_rake_tasks.rbi
#
# packaging_rake_tasks-1.4.6
module Packaging
  def self.configuration(&block); end
end
module Packaging::Tasks
  def self.load_tasks(params = nil); end
end
class Packaging::Configuration
  def documentation_minimal; end
  def documentation_minimal=(arg0); end
  def exclude_files; end
  def exclude_files=(arg0); end
  def include_files; end
  def include_files=(arg0); end
  def initialize; end
  def maintenance_mode; end
  def maintenance_mode=(arg0); end
  def obs_api; end
  def obs_api=(arg0); end
  def obs_project; end
  def obs_project=(arg0); end
  def obs_sr_project; end
  def obs_sr_project=(arg0); end
  def obs_target; end
  def obs_target=(arg0); end
  def package_dir; end
  def package_dir=(arg0); end
  def package_name; end
  def package_name=(arg0); end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  def skip_license_check; end
  def skip_license_check=(arg0); end
  def version; end
  def version=(arg0); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class Object < BasicObject
  def add_git_files(package_task); end
  def build_dist; end
  def build_tarball; end
  def buildrequires; end
  def check_changes!; end
  def check_doc; end
  def check_doc_output; end
  def checkout; end
  def cleaning; end
  def copy_sources; end
  def create_package_task; end
  def different_tarballs?(source1, source2); end
  def license_report; end
  def obs_api; end
  def obs_project; end
  def obs_sr_project; end
  def osc_checkout_dir; end
  def package_dir; end
  def package_file_name; end
  def package_file_path; end
  def package_name; end
  def remove_old_packages; end
  def version_changed?(updated_spec_file); end
  def version_from_spec(spec_glob); end
end
module Parallel
  def self.each(enum, options = nil, &block); end
end
