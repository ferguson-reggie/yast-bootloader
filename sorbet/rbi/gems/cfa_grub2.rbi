# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/cfa_grub2/all/cfa_grub2.rbi
#
# cfa_grub2-0.6.5
module CFA
end
module CFA::Grub2
end
class CFA::Grub2::Default < CFA::BaseModel
  def cryptodisk; end
  def default; end
  def default=(value); end
  def distributor; end
  def distributor=(value); end
  def gfxmode; end
  def gfxmode=(value); end
  def hidden_timeout; end
  def hidden_timeout=(value); end
  def initialize(file_handler: nil); end
  def kernel_params; end
  def load; end
  def os_prober; end
  def recovery_entry; end
  def recovery_params; end
  def save(changes_only: nil); end
  def serial_console; end
  def serial_console=(value); end
  def terminal; end
  def terminal=(value); end
  def theme; end
  def theme=(value); end
  def timeout; end
  def timeout=(value); end
  def value_for(key); end
  def xen_hypervisor_params; end
  def xen_kernel_params; end
end
class CFA::Grub2::Default::KernelParams
  def add_parameter(key, value, placer = nil); end
  def empty?; end
  def initialize(line, key); end
  def key; end
  def parameter(key); end
  def remove_parameter(matcher); end
  def replace(line); end
  def serialize; end
end
class CFA::Grub2::Default::KernelParams::ParamTree
  def all_data; end
  def data; end
  def initialize(line); end
  def to_string; end
end
class CFA::Grub2::GrubCfg < CFA::BaseModel
  def boot_entries; end
  def initialize(file_handler: nil); end
  def sections; end
end
class CFA::Grub2::GrubCfg::Parser
  def self.empty; end
  def self.parse(string); end
  def self.parse_entry(line, submenu); end
  def self.serialize(_string); end
end
class CFA::Grub2::DeviceMap < CFA::BaseModel
  def add_mapping(grub_device, system_device); end
  def grub_device_for(system_dev); end
  def grub_devices; end
  def initialize(file_handler: nil); end
  def remove_mapping(grub_device); end
  def save(changes_only: nil); end
  def system_device_for(grub_device); end
end
module CFA::Grub2::InstallDeviceParser
  def self.empty; end
  def self.parse(string); end
  def self.serialize(data); end
end
class CFA::Grub2::InstallDevice < CFA::BaseModel
  def activate=(enabled); end
  def activate?; end
  def add_device(dev); end
  def devices; end
  def generic_mbr=(enabled); end
  def generic_mbr?; end
  def initialize(file_handler: nil); end
  def remove_device(dev); end
end
