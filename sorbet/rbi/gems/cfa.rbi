# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/cfa/all/cfa.rbi
#
# cfa-0.7.0
module CFA
end
class CFA::Matcher
  def collection_match?(element, collection); end
  def initialize(key: nil, collection: nil, value_matcher: nil, &block); end
  def key_match?(element, key); end
  def to_proc; end
  def value_match?(element, matcher); end
end
class CFA::Placer
  def create_element; end
  def new_element(_tree); end
end
class CFA::AppendPlacer < CFA::Placer
  def new_element(tree); end
end
class CFA::BeforePlacer < CFA::Placer
  def initialize(matcher); end
  def new_element(tree); end
end
class CFA::AfterPlacer < CFA::Placer
  def initialize(matcher); end
  def new_element(tree); end
end
class CFA::ReplacePlacer < CFA::Placer
  def initialize(matcher); end
  def new_element(tree); end
end
class CFA::AugeasElement < Hash
end
class CFA::AugeasError < RuntimeError
end
class CFA::AugeasInternalError < CFA::AugeasError
  def aug_message; end
  def details; end
  def initialize(message, details); end
end
class CFA::AugeasParsingError < CFA::AugeasError
  def aug_message; end
  def character; end
  def file; end
  def file_content; end
  def initialize(params); end
  def lens; end
  def line; end
end
class CFA::AugeasSerializingError < CFA::AugeasError
  def aug_message; end
  def aug_tree; end
  def file; end
  def initialize(params); end
  def lens; end
end
class CFA::AugeasCollection
  def [](*args, &block); end
  def add(value, placer = nil); end
  def all?(*args, &block); end
  def any?(*args, &block); end
  def augeas_name; end
  def delete(value); end
  def each(*args, &block); end
  def empty?(*args, &block); end
  def initialize(tree, name); end
  def load_collection; end
  def map(*args, &block); end
  def none?(*args, &block); end
  def to_remove(value); end
  def value_match?(value, match); end
  extend Forwardable
end
class CFA::AugeasTreeValue
  def ==(other); end
  def [](key); end
  def eql?(other); end
  def initialize(tree, value); end
  def modified?; end
  def tree; end
  def tree=(arg0); end
  def value; end
  def value=(value); end
end
class CFA::AugeasTree
  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def add(key, value, placer = nil); end
  def all_data; end
  def collection(key); end
  def data; end
  def delete(matcher); end
  def entry_to_modify(key, value); end
  def eql?(other); end
  def initialize; end
  def mark_new_entry(new_entry, old_entry); end
  def replace_entry(old_entry); end
  def select(matcher); end
  def unique_id; end
end
class CFA::AugeasParser
  def aug_get_error(aug); end
  def empty; end
  def file_name; end
  def file_name=(arg0); end
  def initialize(lens); end
  def parse(raw_string); end
  def report_activity_error!(args, activity, data); end
  def report_error(aug, activity, file_name, data = nil); end
  def report_internal_error!(aug); end
  def serialize(data); end
end
class CFA::BaseModel
  def add_new(key, value, tree); end
  def data; end
  def data=(arg0); end
  def generic_get(key, tree = nil); end
  def generic_set(key, value, tree = nil); end
  def initialize(parser, file_path, file_handler: nil); end
  def load; end
  def loaded?; end
  def merge_changes; end
  def modify(key, value, tree); end
  def save(changes_only: nil); end
  def self.attributes(attrs); end
  def self.default_file_handler; end
  def self.default_file_handler=(arg0); end
  def tree_value_change(key, value); end
  def tree_value_plain(value); end
  def uncomment(key, value, tree); end
end
class CFA::BooleanValue
  def data; end
  def defined?; end
  def disable; end
  def disabled?; end
  def enable; end
  def enabled?; end
  def initialize(name, model, true_value: nil, false_value: nil); end
  def inspect; end
  def to_s; end
  def value=(value); end
end
